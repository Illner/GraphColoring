//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GraphColoring.Tests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TestResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TestResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GraphColoring.Tests.TestResource", typeof(TestResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to valid
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 5
        ///Vertices: 
        ///-- Identifier: 704, userName: 704
        ///-- Identifier: 705, userName: 705
        ///-- Identifier: 706, userName: 706
        ///-- Identifier: 707, userName: 707
        ///-- Identifier: 708, userName: 708
        ///-- Identifier: 709, userName: 709
        ///Edges: 
        ///-- Vertex: 704 (704)
        ///---- 705 (705) 
        ///---- 706 (706) 
        ///---- 707 (707) 
        ///-- Vertex: 705 (705)
        ///---- 704 (704) 
        ///-- Vertex: 706 (706)
        ///---- 704 (704) 
        ///-- Vertex: 707 (70 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ColoredGraphStandard {
            get {
                return ResourceManager.GetString("ColoredGraphStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///Combination algorithm
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 5007, userName: 5007
        ///Edges: 
        ///-- Vertex: 5007 (5007)
        ///Vertex color: 
        ///-- Vertex: 5007, color: 1
        ///
        ///Combination algorithm
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 5008, userName: 5008
        ///-- Identifier: 5009, userName: 5009
        ///-- Identifier: 50 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CombinationStandard {
            get {
                return ResourceManager.GetString("CombinationStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///connectedSequential2
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 916, userName: 916
        ///Edges: 
        ///-- Vertex: 916 (916)
        ///Vertex color: 
        ///-- Vertex: 916, color: 1
        ///
        ///connectedSequential3
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 9
        ///Real count of vertices: 9
        ///Count of edges: 12
        ///Vertices: 
        ///-- Identifier: 917, userName: 917
        ///-- Identifier: 918, userName: 918
        ///-- Identifier: 919, userNam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConnectedSequentialStandard {
            get {
                return ResourceManager.GetString("ConnectedSequentialStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///converterGraphToDotEnum2
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 5145, userName: 5145
        ///Edges: 
        ///-- Vertex: 5145 (5145)
        ///
        ///graph &quot;Name&quot;
        ///{
        ///node[style = filled shape = circle fillcolor = white color = black penwidth = 1]
        ///&quot;5145&quot; [shape = doublecircle shape = doubleoctagon ]
        ///}
        ///
        ///converterGraphToDotEnum3
        ///Name of graph: Name
        ///Count of vertices: 9
        ///Real count of vertices: 9
        ///Count of edges: 12
        ///Vertices: 
        ///- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConverterGraphToDotStandard {
            get {
                return ResourceManager.GetString("ConverterGraphToDotStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to erdosRenyiModelCDividedByNLessThanOne
        ///OK
        ///erdosRenyiModelCDividedByNMoreThanOne
        ///OK
        ///erdosRenyiModelCLogNDividedByN
        ///OK
        ///erdosRenyiModelNotAssigned
        ///OK
        ///invalidVerticesCount
        ///Exception of type &apos;GraphColoring.MyException.GraphException.GraphInvalidCountVerticesException&apos; was thrown.
        ///
        ///.
        /// </summary>
        internal static string GenerateGraphErdosRenyiModelStandard {
            get {
                return ResourceManager.GetString("GenerateGraphErdosRenyiModelStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Genetic algorithm
        ///Graph colored.
        ///Is valid colored: True
        ///
        ///.
        /// </summary>
        internal static string GeneticAlgorithmStandard {
            get {
                return ResourceManager.GetString("GeneticAlgorithmStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bridgesCutVertices1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 5
        ///Real count of vertices: 5
        ///Count of edges: 5
        ///Vertices: 
        ///-- Identifier: 5102, userName: 1
        ///-- Identifier: 5103, userName: 0
        ///-- Identifier: 5104, userName: 2
        ///-- Identifier: 5105, userName: 3
        ///-- Identifier: 5106, userName: 4
        ///Edges: 
        ///-- Vertex: 5102 (1)
        ///---- 5103 (0) 
        ///---- 5104 (2) 
        ///-- Vertex: 5103 (0)
        ///---- 5102 (1) 
        ///---- 5104 (2) 
        ///---- 5105 (3) 
        ///-- Vertex: 5104 (2)
        ///---- 5103 (0) 
        ///---- 5102 (1) 
        ///-- Vertex: 5105 (3)        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphBridgesCutVerticesStandard {
            get {
                return ResourceManager.GetString("GraphBridgesCutVerticesStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to chordal1
        ///Graph created.
        ///Name of graph: Chordal
        ///Count of vertices: 8
        ///Real count of vertices: 8
        ///Count of edges: 15
        ///Vertices: 
        ///-- Identifier: 5191, userName: 5191
        ///-- Identifier: 5192, userName: 5192
        ///-- Identifier: 5193, userName: 5193
        ///-- Identifier: 5194, userName: 5194
        ///-- Identifier: 5195, userName: 5195
        ///-- Identifier: 5196, userName: 5196
        ///-- Identifier: 5197, userName: 5197
        ///-- Identifier: 5198, userName: 5198
        ///Edges: 
        ///-- Vertex: 5191 (5191)
        ///---- 5192 (5192) 
        ///---- 5193 (5193) 
        ///---- 5194 (519 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphChordalStandard {
            get {
                return ResourceManager.GetString("GraphChordalStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphClass1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 9
        ///Vertices: 
        ///-- Identifier: 399, userName: 399
        ///-- Identifier: 400, userName: 400
        ///-- Identifier: 401, userName: 401
        ///-- Identifier: 402, userName: 402
        ///-- Identifier: 403, userName: 403
        ///-- Identifier: 404, userName: 404
        ///Edges: 
        ///-- Vertex: 399 (399)
        ///---- 400 (400) 
        ///---- 402 (402) 
        ///---- 404 (404) 
        ///-- Vertex: 400 (400)
        ///---- 399 (399) 
        ///---- 401 (401) 
        ///---- 403 (403) 
        ///-- Vertex: 401 (4 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphClassStandard {
            get {
                return ResourceManager.GetString("GraphClassStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphComplement1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 4
        ///Real count of vertices: 4
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 532, userName: 532
        ///-- Identifier: 533, userName: 533
        ///-- Identifier: 534, userName: 534
        ///-- Identifier: 535, userName: 535
        ///Edges: 
        ///-- Vertex: 532 (532)
        ///---- 533 (533) 
        ///---- 534 (534) 
        ///---- 535 (535) 
        ///-- Vertex: 533 (533)
        ///---- 532 (532) 
        ///---- 534 (534) 
        ///---- 535 (535) 
        ///-- Vertex: 534 (534)
        ///---- 532 (532) 
        ///---- 533 (533) 
        ///---- 535 (535) 
        ///-- Vertex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphComplementStandard {
            get {
                return ResourceManager.GetString("GraphComplementStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphComponent1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 13
        ///Real count of vertices: 13
        ///Count of edges: 11
        ///Vertices: 
        ///-- Identifier: 273, userName: 273
        ///-- Identifier: 274, userName: 274
        ///-- Identifier: 275, userName: 275
        ///-- Identifier: 276, userName: 276
        ///-- Identifier: 277, userName: 277
        ///-- Identifier: 278, userName: 278
        ///-- Identifier: 279, userName: 279
        ///-- Identifier: 280, userName: 280
        ///-- Identifier: 281, userName: 281
        ///-- Identifier: 282, userName: 282
        ///-- Identifier: 283, userN [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphComponentStandard {
            get {
                return ResourceManager.GetString("GraphComponentStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphCopy1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 4
        ///Real count of vertices: 4
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 566, userName: 566
        ///-- Identifier: 567, userName: 567
        ///-- Identifier: 568, userName: 568
        ///-- Identifier: 569, userName: 569
        ///Edges: 
        ///-- Vertex: 566 (566)
        ///---- 567 (567) 
        ///---- 568 (568) 
        ///---- 569 (569) 
        ///-- Vertex: 567 (567)
        ///---- 566 (566) 
        ///---- 568 (568) 
        ///---- 569 (569) 
        ///-- Vertex: 568 (568)
        ///---- 566 (566) 
        ///---- 567 (567) 
        ///---- 569 (569) 
        ///-- Vertex: 569  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphCopyStandard {
            get {
                return ResourceManager.GetString("GraphCopyStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphCycle1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 5
        ///Real count of vertices: 5
        ///Count of edges: 4
        ///Vertices: 
        ///-- Identifier: 372, userName: 372
        ///-- Identifier: 373, userName: 373
        ///-- Identifier: 374, userName: 374
        ///-- Identifier: 375, userName: 375
        ///-- Identifier: 376, userName: 376
        ///Edges: 
        ///-- Vertex: 372 (372)
        ///---- 373 (373) 
        ///---- 374 (374) 
        ///-- Vertex: 373 (373)
        ///---- 372 (372) 
        ///---- 375 (375) 
        ///-- Vertex: 374 (374)
        ///---- 372 (372) 
        ///---- 376 (376) 
        ///-- Vertex: 375 (375)
        ///---- 373 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphCycleStandard {
            get {
                return ResourceManager.GetString("GraphCycleStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphDegreeSequence1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 9
        ///Real count of vertices: 9
        ///Count of edges: 9
        ///Vertices: 
        ///-- Identifier: 345, userName: 345
        ///-- Identifier: 346, userName: 346
        ///-- Identifier: 347, userName: 347
        ///-- Identifier: 348, userName: 348
        ///-- Identifier: 349, userName: 349
        ///-- Identifier: 350, userName: 350
        ///-- Identifier: 351, userName: 351
        ///-- Identifier: 352, userName: 352
        ///-- Identifier: 353, userName: 353
        ///Edges: 
        ///-- Vertex: 345 (345)
        ///---- 346 (346) 
        ///---- 347 ( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphDegreeSequenceStandard {
            get {
                return ResourceManager.GetString("GraphDegreeSequenceStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphLineGraph1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 5
        ///Real count of vertices: 5
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 646, userName: 646
        ///-- Identifier: 647, userName: 647
        ///-- Identifier: 648, userName: 648
        ///-- Identifier: 649, userName: 649
        ///-- Identifier: 650, userName: 650
        ///Edges: 
        ///-- Vertex: 646 (646)
        ///---- 647 (647) 
        ///---- 648 (648) 
        ///---- 649 (649) 
        ///-- Vertex: 647 (647)
        ///---- 646 (646) 
        ///---- 650 (650) 
        ///-- Vertex: 648 (648)
        ///---- 646 (646) 
        ///---- 649 (649) 
        ///-- Vertex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphLineGraphStandard {
            get {
                return ResourceManager.GetString("GraphLineGraphStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to valid
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 9
        ///Real count of vertices: 9
        ///Count of edges: 13
        ///Vertices: 
        ///-- Identifier: 492, userName: 492
        ///-- Identifier: 493, userName: 493
        ///-- Identifier: 494, userName: 494
        ///-- Identifier: 495, userName: 495
        ///-- Identifier: 496, userName: 496
        ///-- Identifier: 497, userName: 497
        ///-- Identifier: 498, userName: 498
        ///-- Identifier: 499, userName: 499
        ///-- Identifier: 500, userName: 500
        ///Edges: 
        ///-- Vertex: 492 (492)
        ///---- 493 (493) 
        ///---- 495 (495) 
        ///-- Vert [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphModificationStandard {
            get {
                return ResourceManager.GetString("GraphModificationStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphSpanningTree1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 4
        ///Real count of vertices: 4
        ///Count of edges: 4
        ///Vertices: 
        ///-- Identifier: 468, userName: 468
        ///-- Identifier: 469, userName: 469
        ///-- Identifier: 470, userName: 470
        ///-- Identifier: 471, userName: 471
        ///Edges: 
        ///-- Vertex: 468 (468)
        ///---- 469 (469) 
        ///---- 470 (470) 
        ///-- Vertex: 469 (469)
        ///---- 468 (468) 
        ///---- 471 (471) 
        ///-- Vertex: 470 (470)
        ///---- 468 (468) 
        ///---- 471 (471) 
        ///-- Vertex: 471 (471)
        ///---- 469 (469) 
        ///---- 470 (470) 
        ///
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphSpanningTreeStandard {
            get {
                return ResourceManager.GetString("GraphSpanningTreeStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to graphSubGraph1
        ///Graph created.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 5
        ///Vertices: 
        ///-- Identifier: 600, userName: 600
        ///-- Identifier: 601, userName: 601
        ///-- Identifier: 602, userName: 602
        ///-- Identifier: 603, userName: 603
        ///-- Identifier: 604, userName: 604
        ///-- Identifier: 605, userName: 605
        ///Edges: 
        ///-- Vertex: 600 (600)
        ///---- 603 (603) 
        ///---- 604 (604) 
        ///---- 605 (605) 
        ///-- Vertex: 601 (601)
        ///---- 603 (603) 
        ///-- Vertex: 602 (602)
        ///---- 603 (603) 
        ///-- Vertex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphSubGraphStandard {
            get {
                return ResourceManager.GetString("GraphSubGraphStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///Greedy independent set algorithm
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 936, userName: 936
        ///Edges: 
        ///-- Vertex: 936 (936)
        ///Vertex color: 
        ///-- Vertex: 936, color: 1
        ///
        ///Greedy independent set algorithm
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 938, userName: 938
        ///-- Identifier: 939, userName: 939
        ///-- I [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GreedyIndependentSetStandard {
            get {
                return ResourceManager.GetString("GreedyIndependentSetStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///largestFirstSequence2
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 792, userName: 792
        ///Edges: 
        ///-- Vertex: 792 (792)
        ///Vertex color: 
        ///-- Vertex: 792, color: 1
        ///
        ///largestFirstSequence3
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 793, userName: 793
        ///-- Identifier: 794, userName: 794
        ///-- Identifier: 795, userNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LargestFirstSequenceStandard {
            get {
                return ResourceManager.GetString("LargestFirstSequenceStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to optimal1
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 10
        ///Vertices: 
        ///-- Identifier: 870, userName: 870
        ///-- Identifier: 871, userName: 871
        ///-- Identifier: 872, userName: 872
        ///-- Identifier: 873, userName: 873
        ///-- Identifier: 874, userName: 874
        ///-- Identifier: 875, userName: 875
        ///Edges: 
        ///-- Vertex: 870 (870)
        ///---- 872 (872) 
        ///---- 874 (874) 
        ///-- Vertex: 871 (871)
        ///---- 872 (872) 
        ///---- 873 (873) 
        ///---- 874 (874) 
        ///---- 875 (875) 
        ///-- Vertex: 872 (872 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OptimalStandard {
            get {
                return ResourceManager.GetString("OptimalStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to adjacencyList
        ///valid
        ///Reading file: TestFile.temp
        ///Graph created.
        ///Name of graph: Graph name
        ///Count of vertices: 10
        ///Real count of vertices: 10
        ///Count of edges: 10
        ///Vertices: 
        ///-- Identifier: 1, userName: 0
        ///-- Identifier: 2, userName: 5
        ///-- Identifier: 3, userName: 7
        ///-- Identifier: 4, userName: 1
        ///-- Identifier: 5, userName: 6
        ///-- Identifier: 6, userName: 8
        ///-- Identifier: 7, userName: 2
        ///-- Identifier: 8, userName: 3
        ///-- Identifier: 9, userName: 4
        ///-- Identifier: 10, userName: 9
        ///Edges: 
        ///-- Vertex: 1 (0 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReaderStandard {
            get {
                return ResourceManager.GetString("ReaderStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///saturationLargestFirstSequence2
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 890, userName: 890
        ///Edges: 
        ///-- Vertex: 890 (890)
        ///Vertex color: 
        ///-- Vertex: 890, color: 1
        ///
        ///saturationLargestFirstSequence3
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 891, userName: 891
        ///-- Identifier: 892, userName: 892
        ///-- Ide [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SaturationLargestFirstSequenceStandard {
            get {
                return ResourceManager.GetString("SaturationLargestFirstSequenceStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid vertex count (0)
        ///smallestLastSequence2
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 1
        ///Real count of vertices: 1
        ///Count of edges: 0
        ///Vertices: 
        ///-- Identifier: 818, userName: 818
        ///Edges: 
        ///-- Vertex: 818 (818)
        ///Vertex color: 
        ///-- Vertex: 818, color: 1
        ///
        ///smallestLastSequence3
        ///Graph colored.
        ///Name of graph: Name
        ///Count of vertices: 6
        ///Real count of vertices: 6
        ///Count of edges: 6
        ///Vertices: 
        ///-- Identifier: 820, userName: 820
        ///-- Identifier: 821, userName: 821
        ///-- Identifier: 822, userNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SmallestLastSequenceStandard {
            get {
                return ResourceManager.GetString("SmallestLastSequenceStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to write
        ///OK
        ///recordExists
        ///OK
        ///first
        ///OK
        ///
        ///.
        /// </summary>
        internal static string WriterStandard {
            get {
                return ResourceManager.GetString("WriterStandard", resourceCulture);
            }
        }
    }
}
